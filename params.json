{"name":"Cutecat","tagline":"The C++ string library that all the cute kittens use. It is highly efficient, uses nice syntax, is std::string-compatible and has all the string tools you've always missed in C++.","body":"cutecat\r\n=======\r\n\r\n\r\nThe C++ string library that all the cute kittens use. It is highly efficient, uses nice syntax, \r\nis `std::string`-compatible and has all the string tools you've always missed in C++.\r\n\r\nSlices\r\n-------\r\n\r\nWith `std::string`, inserting, replacing or adding to strings is as with all `std::` containers\r\na bit tedious. _cutecat_ uses slices to enable insertion, erasure and substring operation. To quickly refer\r\nto positions relative to the end of the string, negative indices (think Python) are used. \r\n\r\nSlices can be used almost interchangeable with strings.\r\n````c++\r\nusing cutecat::String;\r\nusing cutecat::FromRaw;\r\nusing cutecat::Back;\r\n\r\nString st = FromRaw(\"apple banana\"); \r\n\r\n// replace the space by a colon\r\nst(3,4) <= \":\";\r\n// st is now \"apple:banana\"\r\n\r\n// prepend \"cherry:\"\r\nst(0,0) <= \"cherry:\";\r\n\r\n\r\n// append \":peach\"\r\nst(Back(0)) <= \":peach\";\r\n// without slices: st = st <cat> \":peach\";\r\n\r\n// remove \"apple:\" by substituting the empty string\r\nst(8,14) <= \"\";\r\n\r\n// or lets just make a new string by putting together some (overlapping) slices\r\nString result = st(1,6) <cat> st(2,7) <cat> st(0, Back(1));\r\n\r\n````\r\n\r\nLazy Concatenation\r\n-------\r\n\r\nString concatenation with _cutecat_ uses expression templates to optimize concatenations. String operations\r\ncan thus be expressed  in the simplest possible way without inducing unnecessary copies. \r\n\r\nSlices can be used almost interchangeable with strings.\r\n````c++\r\nusing cutecat::String;\r\nusing cutecat::FromRaw;\r\n\r\n// unnecessary copies are elided and all concatenations done in one batch\r\nString ar = GetSomeString() <cat> \", Price: \" <cat> 24 <cat> \" USD\"; // TODO\r\n\r\nString st = FromRaw(\"peach:cherry\");\r\n\r\n// the following induces no extra copies at all\r\nst = \"apple:\" <cat> st;\r\nst = st <cat> \":banana\";\r\n\r\n````\r\n\r\nOperations: Trim, Split, Join, Find\r\n-------\r\n\r\n_cutecat_ contains a library of useful string operations, almost all of which are unnecessarily hard to do\r\nwith the STL. Many of these algorithms operate much faster than their STL counterparts as they enable the\r\nuse of string slices where the STL would have required full substrings. cutecat operations are generally \r\nfree functions and found via ADL.\r\n````c++\r\nusing cutecat::String;\r\n\r\nString st = GetSomeString();\r\n\r\n// split at commas\r\nstd::vector<StringSlice> parts;\r\nSplit(st, ',', parts); \r\n\r\n// for all parts: remove whitespace from both sides \r\n// (this is done by simply changing the slice window)\r\nfor(auto& slice : parts) {\r\n   slice = TrimSlice(slice); \r\n}\r\n\r\n// now join them again, using a semicolon as separator\r\nString result = Join(\"; \", parts);\r\n````\r\n\r\nOperations: Format, Parse\r\n-------\r\n\r\nType-safe `printf` and `scanf` replacements. A bit like `boost.format`,  yet more lightweight.\r\n\r\n\r\n````\r\nusing cutecat::String;\r\nusing cutecat::Format;\r\n\r\n\r\nString s2 = Format(\" {0} -- {1}, Age: {2}\" \r\n  &= \"Some Name\" \r\n  &= \"my-email@my-hoster.net\"\r\n  &= 23);\r\n// s2 == \"Some Name -- my-email@my-hoster.net, Age: 23\"\r\n \r\n\r\nString name, email;\r\nint age;\r\nif(Extract(\"{0} -- {1}, Age: {2}\" &=name &=email &=age)) {\r\n \r\n}\r\n````\r\n\r\n\r\nCopy-On-Write for static strings\r\n-------\r\n\r\nWith `std::string`, it is oftentimes a hurdle that string literals, which are in static storage and \r\nassuming sane programmers will not be mutated for the entire duration of the program, are needlessly\r\ncopied as to please APIs demanding such thing. With _cutecat_, static strings are explicitly annotated and \r\ncopied the first time they are being written to.\r\n\r\n````c++\r\nusing cutecat::String;\r\nusing cutecat::FromStatic;\r\n\r\nString st = FromStatic(\"lorem ipsum ...\"); // no copy yet\r\nst.set(0) = 'L'; // this does a copy \r\n\r\n````\r\n\r\nstd::string adapter\r\n-------\r\n\r\nTODO\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}